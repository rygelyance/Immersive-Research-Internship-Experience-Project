---
title: "Calculate Affected Demographics"
format: html
editor: visual
---

In this document, you will calculate station-level PM2.5 changes. Afterward, you will calculate impacted demographic groups around each station.

# Calculating Station-Level Pollution Change

```{r}
library("tidyverse")
library("knitr")
```

Upload your team's full data frame required to estimate the impact of light rails on PM2.5 levels surrounding all stations. Below is a simplified example.

```{r}
df<-read.csv("Mega_Dataframe.csv") 

df2<-df %>%
  mutate(date=as.Date(date, format='%Y-%m-%d'))

#period of analysis
startdate<-as.Date("2000-06-01", format='%Y-%m-%d')
enddate<-as.Date("2008-06-01", format='%Y-%m-%d')

#opening data of metro
opendate<-as.Date("2004-06-14", format='%Y-%m-%d')

#date when groundbreak starts
conststart <- as.Date("2001-01-17", format = "%Y-%m-%d")

#Heavy-Duty Engine and Vehicle Standards
HD_Engine <- as.Date("2007-01-01", format = "%Y-%m-%d")
#Nonroad Diesel Rule
NR_Diesel <- as.Date("2004-06-29", format = "%Y-%m-%d")
#Minnesota Mercury Reduction Act
MC_Reduction <- as.Date("2006-05-11", format = "%Y-%m-%d")
#Next Gen Energy Act
NG_Energy <- as.Date("2007-05-25", format = "%Y-%m-%d")
#2030 Regional Development Framework
RDF <- as.Date("2004-01-01", format = "%Y-%m-%d")
#Clean Air Minnesota Initiative
CA_Init <- as.Date("2003-01-01", format = "%Y-%m-%d")
#Minnesota Renewable Energy Standard
RE_Standard <- as.Date("2001-01-01", format = "%Y-%m-%d")
#Vehicle Emissions Inspection and Maintenance Programs
VE_Programs <- as.Date("2001-04-05", format = "%Y-%m-%d")

df3 <- df2 %>%
  filter(date>=startdate & date <= enddate) %>%
  mutate(MetroOpen = ifelse(date >= opendate, 1, 0)) %>%
  mutate(dow = wday(date)) %>%
  mutate(construction = ifelse(date > conststart & date < opendate, 1, 0)) %>%
  group_by(station_num) %>%
  arrange(station_num, date) %>%
  mutate(t = as.numeric(date-startdate)) %>%
  mutate(t2 = t^2, t3 = t^3, t4 = t^4) %>%
  mutate(l_tair = lag(Tair_f_tavg)) %>%
  mutate(l_tair_2 = l_tair^2) %>%
  mutate(l_tair_3 = l_tair^3) %>%
  mutate(l_tair_4 = l_tair^4) %>%
  mutate(l_qair = lag(Qair_f_tavg)) %>%
  mutate(l_qair_2 = l_qair^2) %>%
  mutate(l_qair_3 = l_qair^3) %>%
  mutate(l_qair_4 = l_qair^4) %>%
  mutate(l_wind = lag(Wind_f_tavg)) %>%
  mutate(l_wind_2 = l_wind^2) %>%
  mutate(l_wind_3 = l_wind^3) %>%
  mutate(l_wind_4 = l_wind^4) %>%
  mutate(CA_Init = ifelse(date >= CA_Init, 1, 0)) %>%
  mutate(HD_Engine = ifelse(date >= HD_Engine, 1, 0)) %>%
  mutate(MC_Reduction = ifelse(date >= MC_Reduction, 1, 0)) %>%
  mutate(NG_Energy = ifelse(date >= NG_Energy, 1, 0)) %>%
  mutate(NR_Diesel = ifelse(date >= NR_Diesel, 1, 0)) %>%
  mutate(RDF = ifelse(date >= RDF, 1, 0)) %>%
  mutate(RE_Standard = ifelse(date >= RE_Standard, 1, 0)) %>%
  mutate(VE_Programs = ifelse(date >= VE_Programs, 1, 0))
```

Run stations level regressions. Use the best regression specification (in your team's opinion) from the average effect calculation.

```{r}
summary(m1 <- lm(log(pm25) ~ MetroOpen:as.factor(station_num) +
                   construction +
                   Tair_f_tavg +
                   l_tair +
                   l_tair_2 +
                   l_tair_3 +
                   l_tair_4 +
                   Qair_f_tavg +
                   l_qair +
                   l_qair_2 +
                   l_qair_3 +
                   l_qair_4 +
                   Wind_f_tavg +
                   l_wind +
                   l_wind_2 +
                   l_wind_3 +
                   l_wind_4 +
                   holiday +
                   t +
                   t2 +
                   t3 +
                   t4 +
                   as.factor(month) +
                   as.factor(dow)
                   , data = df3))
```

The code below prints out the station-level effect and the p-values

```{r}
c <- coef(m1)
len_coef<-length(coef(m1))

#get coefficients of the station-level effect
coef<-coef(m1)[(len_coef-36): len_coef]

#get p values of the station-level effect (p<0.05 is statistically significant)
pval<-summary(m1)$coefficients[,4][(len_coef-3): len_coef]

kable(cbind(coef, pval), digits=2)
```

# Query demographic data

Helpful resource: <https://walker-data.com/tidycensus/articles/basic-usage.html>

Get census key

```{r}
library(tidycensus)
api_key <- "512f3cbcfc69f2d02ddabb5d78704b4df660fb75"
census_api_key(api_key, install=TRUE, overwrite = T)
readRenviron("~/.Renviron")
```

Identify variables that you would like to query

```{r}
vars<-load_variables(year=2000, dataset="sf1", cache = TRUE)
#P005001 Total
#P005003 White
#P005004 Black
#P005005 Native
#P005006 Asian
#P005010 Hispanic

#write.csv(vars, "census.csv")
```

Query variables

```{r}
targetvars<-c("P005001", "P005003", "P005004", "P005005", "P005006", "P005010")
race<-get_decennial(year = 2000, geography = "block", variables=targetvars, state="MN", county="Hennepin", output="wide")
```

Rename columns

```{r}
racename<-race %>%
  rename(total=P005001, white=P005003, black=P005004, native=P005005, asian=P005006, hisp=P005010)
```

# Calculate affected demographic group

```{r}
library("terra")
```

```{r}
buff<-vect("Station_Buffers.shp")
plot(buff)
```

Download shapefiles from [tigris package](https://github.com/walkerke/tigris)

```{r}
shape<-tigris::blocks(state="MN", county="Hennepin", class="sp", year=2000)
shapevect<-vect(shape)
shapedf<-as.data.frame(shape)
```

```{r}
blockrace<-merge(shapevect, racename, by.x="BLKIDFP00", by.y="GEOID")

blockrace$blockarea<-expanse(blockrace, unit="m")

blockracedf<-as.data.frame(blockrace)

summary(blockracedf)

#100 percent match
```

Intersect blocks with buffers

```{r}
for (i in 1:37) {
  buff2 <- subset(buff, buff$FID == i)

  int<-crop(blockrace, buff2)

  int$intarea<-expanse(int, unit="m")

  intdf<-as.data.frame(int) %>%
    mutate(frac_area=intarea/blockarea) %>%
    mutate(total=total*frac_area, 
          white=white*frac_area, 
          black=black*frac_area, 
          native=native*frac_area, 
          asian=asian*frac_area, 
          hisp=hisp*frac_area) %>%
    summarize(total=sum(total), 
            white=sum(white), 
            black=sum(black), 
            native=sum(native), 
            asian=sum(asian), 
            hisp=sum(hisp)) %>%
    mutate(pct_white=white*100/total, 
          pct_black=black*100/total, 
          pct_native=native*100/total,
          pct_asian=asian*100/total,
          pct_hisp=hisp*100/total)
  
  write.csv(intdf, paste0("Census Data/census_data_station", i,".csv"), row.names = F)
  
  }

```

Summarize demographic groups that live near light rail stations

```{r}
sum_demog<-intdf %>%
  select(pct_hisp, pct_white, pct_native, pct_black, pct_asian)

kable(sum_demog, digits=2)
```

Merge station-level demographic data with station-level pollution reduction data.

Calculate the average emissions that each demographic group sees by using the formula below:

$\dfrac{Hisp_{area1} \times Reduction_{area1} + Hisp_{area2} \times Reduction_{area2}}{Hisp_{area1} + Hisp_{area2}}$
